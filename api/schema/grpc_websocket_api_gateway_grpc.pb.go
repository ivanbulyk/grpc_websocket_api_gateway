// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GrpcWebsocketApiGatewayClient is the client API for GrpcWebsocketApiGateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcWebsocketApiGatewayClient interface {
	GetL2OrderBook(ctx context.Context, in *L2OrderBookRequest, opts ...grpc.CallOption) (GrpcWebsocketApiGateway_GetL2OrderBookClient, error)
}

type grpcWebsocketApiGatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcWebsocketApiGatewayClient(cc grpc.ClientConnInterface) GrpcWebsocketApiGatewayClient {
	return &grpcWebsocketApiGatewayClient{cc}
}

func (c *grpcWebsocketApiGatewayClient) GetL2OrderBook(ctx context.Context, in *L2OrderBookRequest, opts ...grpc.CallOption) (GrpcWebsocketApiGateway_GetL2OrderBookClient, error) {
	stream, err := c.cc.NewStream(ctx, &GrpcWebsocketApiGateway_ServiceDesc.Streams[0], "/GrpcWebsocketApiGateway/GetL2OrderBook", opts...)
	if err != nil {
		return nil, err
	}
	x := &grpcWebsocketApiGatewayGetL2OrderBookClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GrpcWebsocketApiGateway_GetL2OrderBookClient interface {
	Recv() (*L2OrderBook, error)
	grpc.ClientStream
}

type grpcWebsocketApiGatewayGetL2OrderBookClient struct {
	grpc.ClientStream
}

func (x *grpcWebsocketApiGatewayGetL2OrderBookClient) Recv() (*L2OrderBook, error) {
	m := new(L2OrderBook)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GrpcWebsocketApiGatewayServer is the server API for GrpcWebsocketApiGateway service.
// All implementations must embed UnimplementedGrpcWebsocketApiGatewayServer
// for forward compatibility
type GrpcWebsocketApiGatewayServer interface {
	GetL2OrderBook(*L2OrderBookRequest, GrpcWebsocketApiGateway_GetL2OrderBookServer) error
	// mustEmbedUnimplementedGrpcWebsocketApiGatewayServer()
}

// UnimplementedGrpcWebsocketApiGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGrpcWebsocketApiGatewayServer struct {
}

func (UnimplementedGrpcWebsocketApiGatewayServer) GetL2OrderBook(*L2OrderBookRequest, GrpcWebsocketApiGateway_GetL2OrderBookServer) error {
	return status.Errorf(codes.Unimplemented, "method GetL2OrderBook not implemented")
}
func (UnimplementedGrpcWebsocketApiGatewayServer) mustEmbedUnimplementedGrpcWebsocketApiGatewayServer() {
}

// UnsafeGrpcWebsocketApiGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrpcWebsocketApiGatewayServer will
// result in compilation errors.
type UnsafeGrpcWebsocketApiGatewayServer interface {
	mustEmbedUnimplementedGrpcWebsocketApiGatewayServer()
}

func RegisterGrpcWebsocketApiGatewayServer(s grpc.ServiceRegistrar, srv GrpcWebsocketApiGatewayServer) {
	s.RegisterService(&GrpcWebsocketApiGateway_ServiceDesc, srv)
}

func _GrpcWebsocketApiGateway_GetL2OrderBook_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(L2OrderBookRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GrpcWebsocketApiGatewayServer).GetL2OrderBook(m, &grpcWebsocketApiGatewayGetL2OrderBookServer{stream})
}

type GrpcWebsocketApiGateway_GetL2OrderBookServer interface {
	Send(*L2OrderBook) error
	grpc.ServerStream
}

type grpcWebsocketApiGatewayGetL2OrderBookServer struct {
	grpc.ServerStream
}

func (x *grpcWebsocketApiGatewayGetL2OrderBookServer) Send(m *L2OrderBook) error {
	return x.ServerStream.SendMsg(m)
}

// GrpcWebsocketApiGateway_ServiceDesc is the grpc.ServiceDesc for GrpcWebsocketApiGateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrpcWebsocketApiGateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GrpcWebsocketApiGateway",
	HandlerType: (*GrpcWebsocketApiGatewayServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetL2OrderBook",
			Handler:       _GrpcWebsocketApiGateway_GetL2OrderBook_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "schema/grpc_websocket_api_gateway.proto",
}
